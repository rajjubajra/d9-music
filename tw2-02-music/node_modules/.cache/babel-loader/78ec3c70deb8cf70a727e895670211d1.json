{"ast":null,"code":"import _regeneratorRuntime from\"/Users/rajju/Sites/REACT-WEBSITES/d9-music/tw2-02-music/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/rajju/Sites/REACT-WEBSITES/d9-music/tw2-02-music/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import axios from'axios';import{baseurl}from'./config';/*\n * Wrapper for axios AJAX library.\n * \n * Basically, we use axios directly. But before axios can be used,\n * - we create an new axios instance\n * - give than instance an AJAX fetched CSRF token, which it will send as header 'X-CSRF-Token' with every request\n * - tell the instance that it should include credentials (cookie) with every request\n * - tell the instance that it should include the query parameter \"?_format=json\" with every request\n * \n * Finally, we wrap this activity in a Promise and return it, so that callers can\n * rely on the promise to call their own callback on successful resolution of the promise\n * or an error handler if the promise gets rejected.\n */var singleton=null;// a singleton instance of axios that the default init function returns\n// note the 'async' keyword, it allows us to call 'await' later\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var tokenURL,response,csrf_token;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(singleton){_context.next=14;break;}tokenURL=baseurl.URL+'/session/token';_context.prev=2;_context.next=5;return axios.get(tokenURL,{withCredentials:true// required to send auth cookie\n});case 5:response=_context.sent;csrf_token=response.data;singleton=axios.create({baseURL:baseurl.URL,// every request is relative to this URL\nwithCredentials:true,// include auth cookie in every request\nheaders:{'X-CSRF-Token':csrf_token},// include this header in every request\nparams:{_format:'json'}// add these query params to every request\n});console.log('Created new axios instance',singleton);_context.next=14;break;case 11:_context.prev=11;_context.t0=_context[\"catch\"](2);console.error(_context.t0);case 14:console.log(\"SINGLETON\",singleton);return _context.abrupt(\"return\",singleton);case 16:case\"end\":return _context.stop();}}},_callee,null,[[2,11]]);}));","map":{"version":3,"sources":["/Users/rajju/Sites/REACT-WEBSITES/d9-music/tw2-02-music/src/config/ajax.js"],"names":["axios","baseurl","singleton","tokenURL","URL","get","withCredentials","response","csrf_token","data","create","baseURL","headers","params","_format","console","log","error"],"mappings":"iRAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAAQC,OAAR,KAAsB,UAAtB,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,GAAIC,CAAAA,SAAS,CAAG,IAAhB,CAAqB;AAErB;AACA;AACA,mFAAe,uKACTA,SADS,0BAELC,QAFK,CAEMF,OAAO,CAACG,GAAR,CAAc,gBAFpB,uCAIcJ,CAAAA,KAAK,CAACK,GAAN,CAAUF,QAAV,CAAoB,CACzCG,eAAe,CAAE,IAAK;AADmB,CAApB,CAJd,QAIHC,QAJG,eAOHC,UAPG,CAOUD,QAAQ,CAACE,IAPnB,CAQTP,SAAS,CAAGF,KAAK,CAACU,MAAN,CAAa,CACvBC,OAAO,CAAEV,OAAO,CAACG,GADM,CACD;AACtBE,eAAe,CAAE,IAFM,CAEA;AACvBM,OAAO,CAAE,CAAE,eAAgBJ,UAAlB,CAHc,CAGkB;AACzCK,MAAM,CAAE,CAAEC,OAAO,CAAE,MAAX,CAAqB;AAJN,CAAb,CAAZ,CAMAC,OAAO,CAACC,GAAR,CAAY,4BAAZ,CAA0Cd,SAA1C,EAdS,iFAgBTa,OAAO,CAACE,KAAR,cAhBS,QAmBbF,OAAO,CAACC,GAAR,CAAY,WAAZ,CAAwBd,SAAxB,EAnBa,gCAoBNA,SApBM,uEAAf","sourcesContent":["import axios from 'axios'\nimport {baseurl} from './config'\n\n/*\n * Wrapper for axios AJAX library.\n * \n * Basically, we use axios directly. But before axios can be used,\n * - we create an new axios instance\n * - give than instance an AJAX fetched CSRF token, which it will send as header 'X-CSRF-Token' with every request\n * - tell the instance that it should include credentials (cookie) with every request\n * - tell the instance that it should include the query parameter \"?_format=json\" with every request\n * \n * Finally, we wrap this activity in a Promise and return it, so that callers can\n * rely on the promise to call their own callback on successful resolution of the promise\n * or an error handler if the promise gets rejected.\n */\nlet singleton = null // a singleton instance of axios that the default init function returns\n\n// note the 'async' keyword, it allows us to call 'await' later\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default async () => {\n  if(!singleton) {\n    const tokenURL = baseurl.URL + '/session/token';\n    try {\n      const response = await axios.get(tokenURL, {\n        withCredentials: true // required to send auth cookie\n      })\n      const csrf_token = response.data\n      singleton = axios.create({\n        baseURL: baseurl.URL, // every request is relative to this URL\n        withCredentials: true, // include auth cookie in every request\n        headers: { 'X-CSRF-Token': csrf_token }, // include this header in every request\n        params: { _format: 'json' }, // add these query params to every request\n      })\n      console.log('Created new axios instance', singleton)\n    } catch(error) {\n      console.error(error)\n    }\n  }\n  console.log(\"SINGLETON\",singleton);\n  return singleton\n\n}"]},"metadata":{},"sourceType":"module"}